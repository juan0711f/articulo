bool primera = true;
bool continuar = true;
real auxiliar = 1;

while(continuar)
{
	primera = true;
	for(int j = 10; j >= 1 ; j = j - 1)
	{
		real Njaux = 0.1;
		real peso = auxiliar*j*Njaux;
		Escribir(filename, "\n == peso usado: "+peso+"\n", false);
		Escribir(filename, "\n == j: "+j+" y auxiliar: "+auxiliar+"\n", false);
		cout<<endl<<"Realizando calculos para j: "<<j<<" y auxiliar: "<<auxiliar<<endl;

		if(!primera)
		{
			Escribir(filename, "\n === funcional menor obtenido de los pesos anteriores: "+J+" === \n", false);
			cout<<"Funcional del peso anterior: "<<J<<endl;
		}
		if(iteracionesSistema != 1)
		{
			Escribir(filename, "\n === funcional de la iteracion anterior: "+Jantiguo+" === \n", false);
			cout<<"Funcional de la iteracion anterior: "<<Jantiguo<<endl;
		}

		//Escribir(filename, "{", false);
		for(int m = 0; m <= nIter; m++)
		{
			Uaux[m] = TruncUpU(TruncDo(U[m] - auxiliar*j*Njaux*dU[m]));
			Saux[m] = TruncUpS(TruncDo(S[m] - auxiliar*j*Njaux*dS[m]));
		}
		
		Escribir(filename, "Se procede a resolver el sistema original con los controles adquiridos usando peso = "+peso+"\n", false);

    	include "include/include_OptimalControl_part5_aux.edp";

    	cout<<endl<<"Se procede a calcular el funcional"<<endl;
    	Escribir(filename, "\n Se procede a calcular el funcional \n", false);

		real sum1, sum2, sum3, sum4, sum5, sum6;
	    sum1 = sum2 = sum3 = sum4 = sum5 = sum6 = 0;

	    // J1 y J4 (Durante todo el tiempo)
		for(int i = 1; i <= nIter-1; i++)
	    {
	    	u = uVec[i];
	    	s = sVec[i];
			sum1 += int2d(Th)(u);
			sum4 += int2d(Th)(square(s - beta));
		}
		u = uVec[nIter];
		s = sVec[nIter];
		u0 = uVec[0];
		s0 = sVec[0];
		J1 = k1 * (dt * 0.5 * (int2d(Th)(u0) + 2*sum1 + int2d(Th)(u)));
		J2 = k2 * 0.5 * (dt * 0.5 * (int2d(Th)(square(s0 - beta))) + 2*sum4 + int2d(Th)(square(s - beta)));

		// J2 y J5 (En el timpo final T)
		J3 = l1 * int2d(Th)(u);
		J4 = l2 * 0.5 * int2d(Th)(square(s - beta));

		// J6, J7 (Controles)
		for(int i = 1; i <= nIter - 1; i++)
		{
			//sum2 += square(Uaux[i]);
			//sum3 += square(Saux[i]);
			sum6 += Uaux[i];
			sum5 += Saux[i];
		}
		J5 = k3 * (dt * 0.5 * (Uaux[0] + 2*sum2 + Uaux[nIter]));
		J6 = k4 * (dt * 0.5 * (Saux[0] + 2*sum3 + Saux[nIter]));
		// J8 = delta1 * 0.5 * dt * (Uaux[0] + 2*sum6 + Uaux[nIter]);
		// J9 = delta2 * 0.5 * dt * (Saux[0] + 2*sum5 + Saux[nIter]);


		Jaux = J1 + J2 + J3 + J4 + J5 + J6;
		Escribir(filename, "J obtenido: "+J1+" + "+J2+" + "+J3+" + "+J4+" + "+J5+" + "+J6+" = "+Jaux+"\n\n", false);
		cout<<endl<<endl<<endl<<"Valor del funcional obtenido: "<<Jaux<<endl;

		if(iteracionesSistema != 1)
		{
			cout<<"J antiguo (el que se obtuvo en la iteracion anterior): "<<Jantiguo<<endl;
			real dife = abs(Jantiguo - Jaux);
			Escribir(filename, "\n Diferencia con el funcional que se obtuvo en la iteracion del sistema de control: "+dife+"\n\n", false);
			cout<<"Diferencia con el funcional que se obtuvo en la iteracion del sistema de control anterior: "<<dife<<endl;
		}
		if(primera){
			cout<<"Es la primera iteracion"<<endl;
			J = Jaux;
			for(int m = 0; m <= nIter; m++)
			{
				U2aux[m] = Uaux[m];
				S2aux[m] = Saux[m];

				uVecAux[m] = uVec[m];
				sVecAux[m] = sVec[m];
			}
		}
		else
		{
			cout<<"J que se obtuvo con el paso anterior: "<<J<<endl;
			if(Jaux < J)
			{
				cout<<"El funcional hallado es menor que el menor funcional obtenido de los pesos anteriores con una distancia de: "<<J-Jaux<<endl;
				cout<<"Se actualizan los datos guardados"<<endl;
				J = Jaux;
				if(J < Jantiguo)
				{
					cout<<"El funcional NO es menor que el menor funcional obtenido de los pesos anteriores"<<endl;
				}
				for(int m = 0; m <= nIter; m++)
				{
					U2aux[m] = Uaux[m];
					S2aux[m] = Saux[m];

					uVecAux[m] = uVec[m];
					sVecAux[m] = sVec[m];
				}
			} else {
				cout<<"El funcional hallado es mayor que el que se obtuvo en la anterior iteracion con una diferencia de: "<<J-Jaux<<endl;
			}
		}
		primera = false;

	}
	// TERMINACION DEL LOOP FOR

	if(iteracionesSistema != 1)
	{
		fResta(iteracionesSistema) = abs(J - Jantiguo);
		if (J < Jantiguo)
		{
			// Voz("El funcional encontrado es menor que el funcional de la iteracion anterior.");
			// Voz("Actualizando datos para empezar una nueva iteracion.");
			funcional(iteracionesSistema) = J;
			continuar = false;
			Jantiguo = J;
			Escribir(filename, "\n Valores del funcional: \n", false);
			cout<<endl<<"valores del funcional"<<endl;
			for(int i = 1; i <= iteracionesSistema; i++)
			{
			    real funci = funcional[i];
			    cout<<funci<<endl;
			    Escribir(filename, funci+"\n", false);
			}
			Escribir(filename, "\n J_resta: \n", false);
			for(int i = 2; i <= iteracionesSistema; i++)
			{
			    real resta = fResta[i];
			    real aux = iteracionesSistema-1;
			    Escribir(filename, "|J_"+aux+" - J_"+iteracionesSistema+"| = "+resta+"\n", false);
			}

			for(int i = 0; i <= nIter; i++)
			{
			    U[i] = U2aux[i];
			    S[i] = S2aux[i];
				
				uVec[i] = uVecAux[i];
				sVec[i] = sVecAux[i];
			}
		}
		else
		{
			// Voz("El funcional encontrado es mayor que el funcional de la iteracion anterior. Se reduce el paso de tiempo.");
			continuar = true;
		}
	}
	else
	{
		// Voz("Actualizando datos para empezar una nueva iteracion.");
		continuar = false;
		Jantiguo = J;
		funcional(iteracionesSistema) = J;
		cout<<"J antiguo: "<<Jantiguo<<endl;
		Escribir(filename, "\n Valores del funcional: \n", false);
		cout<<endl<<"valores del funcional"<<endl;
		for(int i = 1; i <= iteracionesSistema; i++)
		{
		    real funci = funcional[i];
		    cout<<funci<<endl;
		    Escribir(filename, funci+"\n", false);
		}
		Escribir(filename, "\n J_resta: \n", false);
		for(int i = 2; i <= iteracionesSistema; i++)
		{
		    real resta = fResta[i];
		    real aux = iteracionesSistema-1;
		    Escribir(filename, "|J_"+aux+" - J_"+iteracionesSistema+"| = "+resta+"\n", false);
		}

		for(int i = 0; i <= nIter; i++)
		{
		    U[i] = U2aux[i];
		    S[i] = S2aux[i];

		    uVec[i] = uVecAux[i];
			sVec[i] = sVecAux[i];
		}
	}

	if(continuar == true && iteracionesSistema != 1)
	{
		auxiliar = auxiliar * 0.1;
	}
}